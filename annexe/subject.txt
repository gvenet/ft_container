Objectifs

Dans ce projet, vous implémenterez les différents types de conteneurs du standard C++
bibliothèque de modèles.
Pour chaque conteneur, rendez les fichiers de classe nommés de manière appropriée.
L'espace de noms sera toujours ft et vos conteneurs seront testés à l'aide de ft::<container>.
Vous devez respecter la structure du conteneur de référence. S'il manque une partie du
forme canonique orthodoxe, ne l'appliquez pas.
Pour rappel, nous codons en C++98, donc toute nouvelle fonctionnalité des conteneurs NE DOIT PAS
être implémentée, mais toutes les anciennes fonctionnalités (même obsolètes) sont attendues.

• Implémentez les conteneurs suivants et remettez les fichiers nécessaires <container>.hpp

• Vous devez également fournir un main.cpp qui teste tout pour vos évaluations. (toi
faut aller plus loin que l'exemple !)

• Vous devez produire un binaire avec uniquement vos conteneurs et un avec le même
tests avec des conteneurs STL.

• Comparez les sorties et la synchronisation (vous pouvez être jusqu'à 20 fois plus lent).

• les fonctions membres, les non-membres et les surcharges sont attendues.

• respectez la dénomination, soignez les détails.

• Vous devez utiliser std::allocator.

• Vous devez justifier votre structure de données interne pour chaque conteneur (à l'aide d'un simple tableau
pour une carte n'est pas ok).

• Si le conteneur a un système d'itérateur, vous devez l'implémenter.

• iterators_traits, reverse_iterator, enable_if, is_integral, equal/lexicographical compare, std::pair, std::make_pair, doivent être réimplémentés.

• Vous pouvez utiliser https://www.cplusplus.com/ et https://cppreference.com/ comme
les références.

• Vous ne pouvez pas implémenter plus de fonctions publiques que celles proposées dans la norme
conteneurs. Tout le reste doit être privé ou protégé. Chaque fonction publique/-
variable doit être justifiée.

• Pour les surcharges de non-membres, le mot-clé friend est autorisé. Chaque utilisation d'un ami
doit être justifiée et sera vérifiée lors de l'évaluation.
Vous devez rendre les conteneurs suivants et leurs fonctions associées :

• Vector

• Map

• Stack
Votre pile utilisera votre classe vectorielle comme conteneur sous-jacent par défaut, elle doit toujours être
compatible avec d'autres conteneurs comme celui de STL.
Les conteneurs STL sont interdits.
Vous êtes autorisé à utiliser la bibliothèque STD.
